//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/melodidey/Source/csharp/Q1/Compiler/CGrammar.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="CGrammarParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ICGrammarVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="CGrammarParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] CGrammarParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CGrammarParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction([NotNull] CGrammarParser.FunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="CGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] CGrammarParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>bitwiseXorExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitwiseXorExpression([NotNull] CGrammarParser.BitwiseXorExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantExpression([NotNull] CGrammarParser.ConstantExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lessThanOrEqualExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessThanOrEqualExpression([NotNull] CGrammarParser.LessThanOrEqualExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>modulusExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModulusExpression([NotNull] CGrammarParser.ModulusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] CGrammarParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notEqualExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotEqualExpression([NotNull] CGrammarParser.NotEqualExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>multiplyExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplyExpression([NotNull] CGrammarParser.MultiplyExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>greaterThanExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterThanExpression([NotNull] CGrammarParser.GreaterThanExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicalOrExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOrExpression([NotNull] CGrammarParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>greaterThanOrEqualExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterThanOrEqualExpression([NotNull] CGrammarParser.GreaterThanOrEqualExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>divideExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivideExpression([NotNull] CGrammarParser.DivideExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>bitwiseOrExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitwiseOrExpression([NotNull] CGrammarParser.BitwiseOrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] CGrammarParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddExpression([NotNull] CGrammarParser.AddExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>subtractExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubtractExpression([NotNull] CGrammarParser.SubtractExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>bitwiseAndExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitwiseAndExpression([NotNull] CGrammarParser.BitwiseAndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lessThanExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessThanExpression([NotNull] CGrammarParser.LessThanExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicalAndExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAndExpression([NotNull] CGrammarParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>invertExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvertExpression([NotNull] CGrammarParser.InvertExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>equalExpression</c>
	/// labeled alternative in <see cref="CGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualExpression([NotNull] CGrammarParser.EqualExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>intConstant</c>
	/// labeled alternative in <see cref="CGrammarParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntConstant([NotNull] CGrammarParser.IntConstantContext context);
}
